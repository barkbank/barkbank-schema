name: x-test
on:
  workflow_call:
jobs:
  get-dumps:
    runs-on: ubuntu-latest
    # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
    strategy:
      matrix:
        migrations_dir: [schema, migrations]
    env:
      MIGRATIONS_DIR: ${{matrix.migrations_dir}}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Flyway
        run: |
          sudo apt-get -y install wget
          wget -qO- https://download.red-gate.com/maven/release/com/redgate/flyway/flyway-commandline/10.2.0/flyway-commandline-10.2.0-linux-x64.tar.gz | tar -xvz
          ln -s $(pwd)/flyway-10.2.0/flyway /usr/local/bin

      - name: Start PostgreSQL docker container
        run: |
          docker run -d --name test_container \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=password \
            -e POSTGRES_DB=testdb \
            -v $(pwd)/scripts:/scripts \
            -v test_volume:/var/lib/postgresql/data \
            -p 5432:5432 \
            postgres:15
          sleep 3

      - name: Run Flyway
        run: flyway -url=jdbc:postgresql://localhost:5432/testdb -locations=${MIGRATIONS_DIR} -user=postgres -password=password -driver=org.postgresql.Driver -encoding=UTF-8 -validateOnMigrate=true -baselineOnMigrate=true -table=schema_history migrate

      - name: Verify RLS is enabled
        run: |
          docker exec -t test_container psql \
              -U postgres \
              -d testdb \
              -f /scripts/list-missing-rls.sql \
              -o /tmp/rls_missing.txt
          docker cp test_container:/tmp/rls_missing.txt rls_missing.txt
          if grep -q "(0 rows)" rls_missing.txt; then
            echo "All tables and views have RLS enabled."
          else
            echo "There are tables or views without RLS enabled. Please review..."
            cat rls_missing.txt
            exit 1
          fi

      - name: Run pg_dump
        run: |
          docker exec -t test_container pg_dump \
              -U postgres \
              -d testdb \
              > pg_dump.sql
          cat pg_dump.sql | grep -v 'V[0-9.]\{1,\}__' > pg_dump_${MIGRATIONS_DIR}.sql

      - name: Upload pg_dump_${{env.MIGRATIONS_DIR}}.sql
        uses: actions/upload-artifact@v4
        with:
          name: pg_dump_${{env.MIGRATIONS_DIR}}
          path: pg_dump_${{env.MIGRATIONS_DIR}}.sql

  compare-dumps:
    runs-on: ubuntu-latest
    needs: [get-dumps]
    steps:
      - name: Download schema dump
        uses: actions/download-artifact@v4
        with:
          name: pg_dump_schema
      - name: Download migrations dump
        uses: actions/download-artifact@v4
        with:
          name: pg_dump_migrations
      - name: Compare dumps
        run: diff pg_dump_schema.sql pg_dump_migrations.sql

# ________________________________________
# REFERENCES
#
# Ref1: Flyway - https://documentation.red-gate.com/fd/command-line-184127404.html
# Ref2: https://docs.github.com/en/actions/using-workflows/reusing-workflows
# Ref3: Passing params between jobs - https://adamcowley.co.uk/posts/til-github-action-output-parameters/
# Ref4: Passing files between jobs - https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts#passing-data-between-jobs-in-a-workflow
#
